import os
import logging
import re
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import IMAGE_FOLDER, LANG_MAP, WORD_FOLDER, PDF_FOLDER
from db_utils import init_db, insert_record, record_exists, fetch_history, fetch_record_by_id, delete_record
from image_processing import extract_text
from translator import translate
from file_savers import save_word, save_pdf

logger = logging.getLogger(__name__)

user_temp = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    init_db()
    welcome = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üì∏, "
        "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ üåç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ üóÇ.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –≤ Word –∏ PDF\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
    )
    await update.message.reply_text(welcome)
    await reset_to_main_menu(update)


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    photo = await update.effective_message.photo[-1].get_file()
    folder = os.path.join(IMAGE_FOLDER, str(user_id))
    os.makedirs(folder, exist_ok=True)
    filename = f"{user_id}_{update.effective_message.message_id}.jpg"
    path = os.path.join(folder, filename)
    await photo.download_to_drive(path)

    user_temp[user_id] = {'file_path': path}
    context.user_data['awaiting_source_lang'] = True

    keyboard = [
        ['–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'],
        ['–ö–∏—Ç–∞–π—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π'],
        ['–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π'],
        ['–ù–µ–º–µ—Ü–∫–∏–π']
    ]
    await update.effective_message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    txt = update.effective_message.text

    if txt == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ':
        await update.effective_message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
        return
    if txt == '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏':
        await show_history(update, context)
        return
    if txt == '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
        await clear_history(update, context)
        return

    if context.user_data.get('awaiting_source_lang') and txt in LANG_MAP:
        info = user_temp.get(user_id, {})
        path = info.get('file_path')
        extracted = extract_text(path, LANG_MAP[txt])
        if not extracted or extracted.startswith(('–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', '–ù–µ —É–¥–∞–ª–æ—Å—å')):
            os.remove(path)
            enhanced = re.sub(r"\.jpg$", "_enhanced.jpg", path)
            if os.path.exists(enhanced): os.remove(enhanced)
            await update.effective_message.reply_text('–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            user_temp.pop(user_id, None)
            await reset_to_main_menu(update)
            return
        user_temp[user_id]['extracted'] = extracted
        context.user_data.pop('awaiting_source_lang', None)
        context.user_data['awaiting_target_lang'] = True
        await update.effective_message.reply_text(
            '–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?',
            reply_markup=ReplyKeyboardMarkup(
                [['–†—É—Å—Å–∫–∏–π','–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'], ['–ö–∏—Ç–∞–π—Å–∫–∏–π','–ò—Å–ø–∞–Ω—Å–∫–∏–π'], ['–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π','–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π'], ['–ù–µ–º–µ—Ü–∫–∏–π']],
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return

    if context.user_data.get('awaiting_target_lang') and txt in LANG_MAP:
        extracted = user_temp[user_id]['extracted']
        translated = translate(extracted, txt)
        if not translated:
            await update.effective_message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
            user_temp.pop(user_id, None)
            await reset_to_main_menu(update)
            return
        user_temp[user_id]['translated'] = translated
        context.user_data.pop('awaiting_target_lang', None)
        await update.effective_message.reply_text(f'–ü–µ—Ä–µ–≤–æ–¥:\n{translated}')
        await update.effective_message.reply_text(
            '–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?',
            reply_markup=ReplyKeyboardMarkup([['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å','–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å']], resize_keyboard=True, one_time_keyboard=True)
        )
        return

    if txt == '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å':
        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        info = user_temp.pop(user_id, {})
        fp = info.get('file_path')
        if fp and os.path.exists(fp):
            os.remove(fp)
        enhanced = re.sub(r'(\.jpg)$', r'_enhanced\1', fp) if fp else None
        if enhanced and os.path.exists(enhanced):
            os.remove(enhanced)
        # –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        await update.effective_message.reply_text('–ü–µ—Ä–µ–≤–æ–¥ –∏ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
        await reset_to_main_menu(update)
        return

    if txt == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
        context.user_data['awaiting_name'] = True
        await update.effective_message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:')
        return

    if context.user_data.get('awaiting_name'):
        name = txt.strip()
        context.user_data['name'] = name
        if record_exists(user_id, name):
            await update.effective_message.reply_text(
                f"–ó–∞–ø–∏—Å—å '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è?",
                reply_markup=ReplyKeyboardMarkup(
                    [['–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å','–ù–æ–≤–æ–µ –∏–º—è']], resize_keyboard=True, one_time_keyboard=True
                )
            )
        else:
            await update.effective_message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:',
                reply_markup=ReplyKeyboardMarkup(
                    [['Word','PDF'], ['–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª']],
                    resize_keyboard=True, one_time_keyboard=True
                )
            )
        context.user_data.pop('awaiting_name', None)
        return

    if txt in ('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å','–ù–æ–≤–æ–µ –∏–º—è'):
        if txt == '–ù–æ–≤–æ–µ –∏–º—è':
            context.user_data['awaiting_name'] = True
            await update.effective_message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
            return
        name = context.user_data.get('name')
        info = user_temp.pop(user_id, {})
        fp, ex, tr = info['file_path'], info['extracted'], info['translated']
        path = save_word(user_id, name, ex, tr)
        with open(path, 'rb') as doc:
            await update.effective_message.reply_document(doc)
        insert_record(user_id, fp, name, ex, tr, path)
        await update.effective_message.reply_text(f"–ó–∞–ø–∏—Å—å '{name}' –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞.")
        await reset_to_main_menu(update)
        return

    if txt in ('Word','PDF'):
        name = context.user_data.get('name')
        info = user_temp.pop(user_id, {})
        fp, ex, tr = info['file_path'], info['extracted'], info['translated']
        path = save_word(user_id, name, ex, tr) if txt == 'Word' else save_pdf(user_id, name, ex, tr)
        with open(path, 'rb') as doc:
            await update.effective_message.reply_document(doc)
        insert_record(user_id, fp, name, ex, tr, path)
        await update.effective_message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥ '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        await reset_to_main_menu(update)
        return

    if txt == '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª':
        info = user_temp.pop(user_id, {})
        name = context.user_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        insert_record(user_id, info['file_path'], name, info['extracted'], info['translated'], None)
        await update.effective_message.reply_text('–ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ–∑ —Ñ–∞–π–ª–∞.')
        await reset_to_main_menu(update)
        return

    if context.user_data.get('awaiting_source_lang'):
        await update.effective_message.reply_text(
            '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.'
        )
        return

    if context.user_data.get('awaiting_target_lang'):
        await update.effective_message.reply_text(
            '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.'
        )
        return

    if context.user_data.get('awaiting_name'):
        await update.effective_message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å/–ù–æ–≤–æ–µ –∏–º—è¬ª).'
        )
        return

    await update.effective_message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.')


async def reset_to_main_menu(update: Update) -> None:
    markup = ReplyKeyboardMarkup(
        [['–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'], ['–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏','–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é']],
        resize_keyboard=True
    )
    await update.effective_message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    rows = fetch_history(user_id)
    if not rows:
        await update.effective_message.reply_text('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.')
        return
    buttons = []
    for rec in rows:
        pid = rec['id']
        buttons.append([
            InlineKeyboardButton(rec['photo_name'], callback_data=f"show_{pid}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{pid}")
        ])
    await update.effective_message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:',
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    rows = fetch_history(user_id)
    for rec in rows:
        fp = rec['file_path']
        if fp and os.path.exists(fp):
            os.remove(fp)
            enhanced = re.sub(r"(\.jpg)$", r"_enhanced\1", fp)
            if os.path.exists(enhanced):
                os.remove(enhanced)
        sp = rec['saved_file_path']
        if sp and os.path.exists(sp):
            os.remove(sp)
    delete_record(user_id)

    for folder in (IMAGE_FOLDER, WORD_FOLDER, PDF_FOLDER):
        user_folder = os.path.join(folder, str(user_id))
        try:
            if os.path.isdir(user_folder) and not os.listdir(user_folder):
                os.rmdir(user_folder)
        except OSError:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {user_folder}")
    await update.effective_message.reply_text('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.')
    await reset_to_main_menu(update)


async def handle_photo_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if data.startswith('show_'):
        pid = int(data.split('_')[1])
        rec = fetch_record_by_id(pid)
        if not rec:
            await query.message.reply_text('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return

        file_path = rec.get('file_path')
        if file_path and os.path.exists(file_path):
            with open(file_path, 'rb') as f:
                await query.message.reply_photo(f, caption=f"–§–æ—Ç–æ –∏–∑ –∑–∞–ø–∏—Å–∏ '{rec['photo_name']}'")

        text_parts = [
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {rec['photo_name']}",
            f"–î–∞—Ç–∞: {rec['timestamp']}",
            f"\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{rec['extracted_text']}",
            f"\n–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{rec['translated_text']}"
        ]
        await query.message.reply_text('\n'.join(text_parts))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        doc_path = rec.get('saved_file_path')
        if doc_path and os.path.exists(doc_path):
            with open(doc_path, 'rb') as f:
                await query.message.reply_document(f)
        await show_history(update, context)
    elif data.startswith('del_'):
        pid = int(data.split('_')[1])
        rec = fetch_record_by_id(pid)
        if rec:
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –µ–≥–æ enhanced
            fp = rec['file_path']
            if fp and os.path.exists(fp):
                os.remove(fp)
                enhanced = re.sub(r"(\.jpg)$", r"_enhanced\1", fp)
                if os.path.exists(enhanced): os.remove(enhanced)
            sp = rec['saved_file_path']
            if sp and os.path.exists(sp): os.remove(sp)
        delete_record(user_id, pid)
        await query.message.reply_text('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.')
        # –ß–∏—Å—Ç–∏–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for folder in (IMAGE_FOLDER, WORD_FOLDER, PDF_FOLDER):
            user_folder = os.path.join(folder, str(user_id))
            try:
                if os.path.isdir(user_folder) and not os.listdir(user_folder):
                    os.rmdir(user_folder)
            except OSError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {user_folder}")

        await show_history(update, context)
